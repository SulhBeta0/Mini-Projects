//One to play a game and earn money and the other to buy & sell items. Finished in 05-02-2025

using System.Globalization;

class App
{
    public static void Main()
    {
        UserManagement player = new();


        Console.WriteLine("-Type (ACCESS) to see your options-");
        do
        {
            Console.Write("\nSystem -> ");
            UserManagement.userGeneralDecision = Console.ReadLine().ToLower();

            GeneralInputManager(UserManagement.userGeneralDecision);
        }
        while (UserManagement.userGeneralDecision != "exit" && UserManagement.userGeneralDecision != "");
    }

    public static void GeneralInputManager(string decision)
    {
        string[] separatingWords = decision.Split(" ", 2);
        string firstWord = string.Empty, secondWord = string.Empty;


        if (separatingWords.Length > 1)
        {
            firstWord = separatingWords[0];
            secondWord = separatingWords[1];
        }
        else { firstWord = separatingWords[0]; }

        switch (firstWord)
        {
            case "see":
                if (secondWord == "money") { UserManagement.GetMoney(); }

                else if (secondWord == "inventory") { UserManagement.GetInventory(); }

                else { Console.WriteLine("See what?"); }
                break;

            case "shop":
                Console.Clear();

                Console.WriteLine("What's your decision?\n+ Buy [item_from_list]\n+ Sell [your_item/s]\n");
                UserManagement.ShopSystem(UserManagement.userActionDecision);

                Console.Clear();
                break;

            case "play":
                Console.Clear();
                Console.CursorVisible = false;

                UserManagement.GameSystem();
                Console.WriteLine("Bye!");
                Thread.Sleep(3000);

                Console.Clear();
                Console.CursorVisible = true;
                break;

            case "access":
                UserManagement.Options();
                break;

            default:
                if (decision != "exit" && decision != "")
                {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine($"{decision} doesn't exist");
                    Console.ResetColor();
                }
                break;
        }
    }
}

class UserManagement
{
    private static readonly Dictionary<string, float> myInv = new();

    public static float Money { get; private set; }

    public static string userGeneralDecision = "";
    public static string userActionDecision = "";

    public static void ShopSystem(string generalDecision)
    {
        while (generalDecision != "return")
        {
            Console.Write("Type (return) to go back -> ");
            generalDecision = Console.ReadLine().ToLower();

            switch (generalDecision)
            {
                case "buy":
                    Console.Clear();

                    Console.WriteLine("Welcome to our Buy System!\n\nHere's the list with the available objects\n");
                    Thread.Sleep(750);
                    GameObjects.ShowingObjectsList();
                    if (CanBuy())
                    {
                        Console.Write("Which one? => ");
                        string buyOpt = Console.ReadLine().ToLower();

                        GameObjects.BuyableItem(buyOpt);
                    }
                    else
                    {
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.WriteLine("ERROR: You're poor.. Go get some money\n");
                        Console.ResetColor();
                    }
                    break;

                case "sell":
                    Console.Clear();

                    Console.WriteLine("Welcome to our Sell System!\n");
                    Thread.Sleep(750);
                    if (CanSell())
                    {
                        float valueOpt;

                        GetInventory();

                        Console.Write("\nWhich one? => ");
                        string sellOpt = Console.ReadLine().ToLower();
                        foreach (var item in myInv)
                        {
                            if (item.Key.Equals(sellOpt))
                            {
                                SellingItem(sellOpt);

                                Console.Write("For how much? => ");
                                if (float.TryParse(Console.ReadLine(), out valueOpt)) { AddMoney(valueOpt); }

                                break;
                            }
                            else
                            {
                                Console.WriteLine("Error: That item is not in your inventory");
                                continue;
                            }
                        }
                    }
                    else
                    {
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.WriteLine("ERROR: Buy things!\n");
                        Console.ResetColor();
                    }
                    break;

                default:
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("-{0}- doesn't exist.\n", generalDecision);
                    Console.ResetColor();
                    break;
            }
        }
    }

    public static void GameSystem()
    {
        Random rng = new();

        int chances = 5;
        int score = 0;


        Console.WriteLine("Welcome to Play & Earn!");
        Thread.Sleep(500);

        Console.WriteLine("Press (space) and earn money!");
        while (chances > 0)
        {
            int aiGameDecision = rng.Next(1, 11), userGameDecision = rng.Next(1, 11);

            if (Console.ReadKey().Key == ConsoleKey.Spacebar)
            {
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.WriteLine($"\n--User[{userGameDecision}] vs AI[{aiGameDecision}]--");
                Console.ResetColor();

                if (aiGameDecision > userGameDecision)
                {
                    Console.WriteLine("AI won this round!");
                    chances--;
                    Console.WriteLine("You have {0} chances\n", chances);
                }
                else if (aiGameDecision < userGameDecision)
                {
                    Console.WriteLine("User won this round!\n");
                    score += 10;
                    AddMoney(60.4f);
                }
                else { Console.WriteLine("It's a tie!\n"); }
            }
            else { Console.WriteLine("You didn't pressed the spacebar"); }
        }
        Console.ForegroundColor = ConsoleColor.Blue;
        Console.WriteLine("--You scored -> {0}pts--", score);
        Console.ResetColor();
    }

    public static float AddMoney(float sizeToIncrement)
    {
        Money += sizeToIncrement;
        return Money;
    }

    public static float RemoveMoney(float sizeToDecrement)
    {
        Money -= sizeToDecrement;
        return Money;
    }

    public static void GetMoney()
    {
        CultureInfo language = new("en-US");

        Console.ForegroundColor = ConsoleColor.Green;
        string showMoney = string.Format(language, "--Your account has {0:C}--", Money);

        Console.WriteLine(showMoney);
        Console.ResetColor();
    }

    public static void AddIntoInv(string item, float valor)
    {
        Console.ForegroundColor = ConsoleColor.Yellow;
        string puedeMeter = myInv.TryAdd(item, valor) ?
            puedeMeter = $"The {item} has been added to your inventory!\n" :
            puedeMeter = $"The {item} has not been added to your inventory!. You can't have duplicities.\n";

        Console.WriteLine(puedeMeter);
        Console.ResetColor();
    }

    public static void GetInventory()
    {
        CultureInfo language = new("en-US");

        Console.WriteLine("- Bought -");
        Console.ForegroundColor = ConsoleColor.Yellow;
        if (CanSell())
        {
            foreach (KeyValuePair<string, float> objeto in myInv)
            {
                string dinero = string.Format(language, "{0:C}", objeto.Value);
                Console.WriteLine("+ -{0}- at {1}", objeto.Key, dinero);
            }
        }
        else
        {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("You do not own anything yet");
            Console.ResetColor();
        }
        Console.ResetColor();
    }

    private static void SellingItem(string itemName) => myInv.Remove(itemName);

    public static bool CanBuy() => Money > 0.0f;

    public static bool CanSell() => myInv.Count > 0;

    public static void Options() => Console.WriteLine("\n- Play\n- Shop\n- See [Money / Inventory]\n- Exit...");
}

class GameObjects
{
    private static readonly Dictionary<string, float> items = new()
            {
                {"brush", 10.00f},
                {"calculator_rtx", 75.99f},
                {"screwdriver", 34.99f},
                {"tape", 15.50f},
                {"led_lamp", 172.00f},
                {"battery_ions", 24999.99f},
                {"8k_projector", 130000.00f},
                {"titan", 89.99f},
                {"camera_255p", 300.00f},
                {"iphone_pro", 1299.99f},
                {"keyboard_jpg", 2000.00f},
                {"refrigerator", 3499.99f},
                {"microphone", 500.00f},
                {"cachimba", 1999.00f},
                {"xxx_movie", 666.66f},
                {"woman", 69.69f},
                {"slave_from_ocean", 799.99f},
                {"kiwi", 12345.67f},
                {"titanic", 101110.11f},
                {"axe_king_monarch_of_shadows", 333333.00f},
                {"shakira_bills", 999999999999.99f}
            };
    private static readonly Dictionary<string, float> updatedItems = new();


    private static Dictionary<string, float> ObjectsListAvailable() //1
    {
        Random rng = new();

        Dictionary<string, float> objectsSelected = new();
        var llavesDict = items.Keys.ToArray();

        for (int i = 0; i < 3; i++)
        {
            string nombreObjeto = llavesDict[rng.Next(llavesDict.Length)];
            float valor = items[nombreObjeto];

            bool insert = objectsSelected.TryAdd(nombreObjeto, valor);
        }
        return objectsSelected;
    }

    private static Dictionary<string, float> KeepingObjects() //2
    {
        foreach (var item in ObjectsListAvailable())
        {
            bool meter = updatedItems.TryAdd(item.Key, item.Value);
        }
        return updatedItems;
    }

    public static void ShowingObjectsList() //3
    {
        CultureInfo language = new("en-US");

        foreach (KeyValuePair<string, float> objeto in KeepingObjects())
        {
            try
            {
                if (objeto.Key.Count() > 0)
                {
                    string showingValues = string.Format(language, "{0:C}", objeto.Value);
                    Console.WriteLine($"+ {objeto.Key.ToUpper()} -> " + showingValues);
                }
                else
                {
                    Console.WriteLine("System is under maintenance :v\n");
                    break;
                }
            }
            catch (IndexOutOfRangeException e) { Console.WriteLine("ERROR: {0}", e.Message); }
        }
    }

    public static void BuyableItem(string item) //4
    {
        foreach (KeyValuePair<string, float> objetos in KeepingObjects())
        {
            if (objetos.Key.Equals(item) && UserManagement.Money >= objetos.Value)
            {
                UserManagement.AddIntoInv(objetos.Key, objetos.Value);
                UserManagement.RemoveMoney(objetos.Value);
                break;
            }
            else { continue; }
        }
        updatedItems.Clear();
    }
}
